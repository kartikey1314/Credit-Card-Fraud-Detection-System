# -*- coding: utf-8 -*-
"""CreditCardFraudModel1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1td1YD2pYV-27rff0-16u4n0Tz3ANVz_-
"""

import pandas as pd


df = pd.read_csv("creditcard.csv")

# loading the dataset to a Pandas DataFrame
credit_card_data = pd.read_csv('creditcard.csv')

print("Rows, Columns:", df.shape)

print("Columns:")
print(df.dtypes)

print(df['Class'].value_counts())
print(df['Class'].value_counts(normalize=True) * 100)

print(df.describe())

import seaborn as sns
import matplotlib.pyplot as plt

corr_matrix = df.corr()
plt.figure(figsize=(12,8))
sns.heatmap(corr_matrix, cmap='coolwarm', vmax=0.3, center=0, square=True, linewidths=0.5)
plt.title("Correlation Heatmap")
plt.show()

# checking the number of missing values in each column
credit_card_data.isnull().sum()

# distribution of legit transactions & fraudulent transactions
credit_card_data['Class'].value_counts()

# separating the data for analysis
legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legit.shape)
print(fraud.shape)

# statistical measures of the data
legit.Amount.describe()

# compare the values for both transactions
credit_card_data.groupby('Class').mean()
legit_sample = legit.sample(n=492)

new_dataset = pd.concat([legit_sample, fraud], axis=0)
new_dataset.head()
new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

X = new_dataset.drop(columns='Class', axis=1)
Y = new_dataset['Class']

print(X)

print(Y)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)
print(X.shape, X_train.shape, X_test.shape)

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import make_pipeline

# Create a pipeline that scales the data and applies Logistic Regression
model = make_pipeline(StandardScaler(), LogisticRegression(max_iter=1000))

# Fit the model
model.fit(X_train, Y_train)

# accuracy on training data
from sklearn.metrics import accuracy_score
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score on Test Data : ', test_data_accuracy)